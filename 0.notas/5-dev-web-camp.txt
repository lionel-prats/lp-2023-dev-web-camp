VIDEO 671

npm install o npm i 
- Se instala node_modules con todas las dependencias del package.json

composer install
- Se instala /vendor con las dependencias del composer.json

npm run dev 
- para que se compile el css, el js y las imagenes (se genera la carpeta /public/build con todo su contenido) 

-----

VIDEO 673 

@mixin contenedor-sm {
    width: min(95%, 60rem); // defino el width y el max-width en una misma linea
    * existe max()
    * existe clamp()
}

----- 

VIDEO 674 

https://developer.mozilla.org/es/docs/Web/CSS/Attribute_selectors

slector de atributo SASS
todos los elementos con clase terminada en "__heading" -> class="xxx__heading"

[class$="__heading"] {
    @include m.nombre-pagina;
}

&= -> que termine con ...  
*= -> que contenga ...

----- 

VIDEO 688 

Convertir un array asociativo en un objeto utilizando el tipo de dato "stdClass" que representa un objeto vacío genérico vvv

$array = [
    "nombre" => "Lionel",
    "edad" => 37,
];

$objeto = (object)$array;

echo "<pre>";
print_r($array);
print_r($objeto);
echo $array["nombre"] . "<br>";
echo $objeto->edad;
exit;

----- 

VIDEO 689 

CONFIGURACION DE MAILTRAP (server de mails para testing) vvv

1. Borré el Inbox creado anteriormente (esa especie de casilla de correo a donde llegan los mails cada vez que, por ejemplo, registro un nuevo usuario) ya que la cuenta gratis de Mailtrap permite tener solo 1 Inbox.

2. Creé un Inbox nuevo llamado "DevWebCamp"

3. Click sobre el nombre del Inbox para cambiar la integración.

4. Cambio la integración a PHPMailer

5. Mailtrap me da estas credenciales para configurar PHPMailer en mi proyecto vvv 

"Use the following setting to configure PHPMailer":
$phpmailer = new PHPMailer();
$phpmailer->isSMTP();
$phpmailer->Host = 'sandbox.smtp.mailtrap.io';
$phpmailer->SMTPAuth = true;
$phpmailer->Port = 2525;
$phpmailer->Username = '29b1ed5b72f7bf';
$phpmailer->Password = '********f3db';

6. Hay que darle click a "Show Credentials" para que se muestre el password y se pueda realizar la configuración correctamente vvv 

SMTP
Host:
sandbox.smtp.mailtrap.io
Port:
25 or 465 or 587 or 2525
Username:
29b1ed5b72f7bf
Password:
fe9bdf60a5f3db
Auth:
PLAIN, LOGIN and CRAM-MD5
TLS:
Optional (STARTTLS on all ports)

7. Seteo las variables de configuracitn en el .env vvv

EMAIL_HOST=sandbox.smtp.mailtrap.io
EMAIL_PORT=2525
EMAIL_USER=29b1ed5b72f7bf
EMAIL_PASS=fe9bdf60a5f3db

8. Como hice cambios, el profesor recomienda detener el servidor local y volver a levantarlo

----- 

VIDEO 693 

REPASO DE router.php 

* por cada "endpoint" que defino en el router (index.php), en verdad estoy ejecutando las funciones get() y post() de la clase Router, definida en Router.php, que van completando los atributos de la misma clase $getRoutes y $postRoutes, que son arrays asociativos donde la clave es cada ruta definida, y el valor es un array de 2 strings: el 1ero. es la clase (controlador) que se tiene que ejecutar y el segundo es el metodo de ese controlador que se tiene que ejecutar vvv

public array $getRoutes = array(6) {
  ["/login"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(5) "login"
  }
  ["/registro"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(8) "registro"
  }
  ["/olvide"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(6) "olvide"
  }
  ["/reestablecer"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(12) "reestablecer"
  }
  ["/mensaje"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(7) "mensaje"
  }
  ["/confirmar-cuenta"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(9) "confirmar"
  }
}

public array $postRoutes = array(5) {
  ["/login"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(5) "login"
  }
  ["/logout"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(6) "logout"
  }
  ["/registro"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(8) "registro"
  }
  ["/olvide"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(6) "olvide"
  }
  ["/reestablecer"]=>
  array(2) {
    [0]=>
    string(26) "Controllers\AuthController"
    [1]=>
    string(12) "reestablecer"
  }
}

* Luego, en index.php, vemos que se ejecuta el metodo $router->comprobarRutas();
* La revisión sigue con comentarios en Router.php, repasando el VIDEO 401 y 402

* COMPRENSION DEFINITIVA DE COMO EL ARRAY QUE PASAMOS A LA VISTA DESDE EL CONTROLADOR LO PODEMOS ACCEDER EN LA VISTA COMO VARIABLES INDIVIDUALES vvv

$view_data = [
    "nombre" => "Lionel",
    "apellido" => "Prats",
    "edad" => 37
];
foreach ($view_data as $key => $value) {
    $$key = $value;
}
echo $nombre . "<br>";
echo $apellido . "<br>";
echo $edad . "<br>";

exit;

----- 

* funcion PHP (a partir de version 8) para buscar un suubstring dentro de un string
* lo utilizamos en Router->render() para switchear entre las vistas del dashboard de administrador y el resto de las vistas de la app 
* retorna un bool vvv

str_contains($url_actual, "/admin") 



